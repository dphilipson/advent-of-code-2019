package day17

import intcode.runIntcode
import util.readLongs

private data class Location(val x: Int, val y: Int) {
    fun neighbors(): List<Location> =
        listOf(Location(x - 1, y), Location(x + 1, y), Location(x, y - 1), Location(x, y + 1))
}

fun main() {
    val program = readLongs("src/day17/input17.txt", ",")[0]
    println(solvePart1(program))
    println(solvePart2(program))
}

private fun solvePart1(program: List<Long>): Int {
    val scaffolds = getScaffoldLocations(getImage(program))
    return scaffolds.asSequence()
        .filter { location ->
            location.neighbors().asSequence()
                .filter { it in scaffolds }
                .count() >= 3
        }
        .map { (x, y) -> x * y }
        .sum()
}

private fun solvePart2(program: List<Long>): Long {
    val updatedProgram = program.toMutableList()
    updatedProgram[0] = 2L
    val inputs = ("A,B,A,C,B,A,C,B,A,C\n" +
            "L,6,L,4,R,12\n" +
            "L,6,R,12,R,12,L,8\n" +
            "L,6,L,10,L,10,L,6\n" +
            "n\n").map { it.toLong() }
    return runIntcode(updatedProgram, inputs).outputs.last()
}

private fun getScaffoldLocations(image: List<String>): Set<Location> =
    image.indices.asSequence()
        .flatMap { y ->
            image[y].indices.asSequence()
                .filter { x -> image[y][x] in "#^<>v" }
                .map { x -> Location(x, y) }
        }
        .toSet()

private fun getImage(program: List<Long>): List<String> =
    runIntcode(program, listOf()).outputs.asSequence()
        .map { it.toChar() }
        .joinToString("")
        .split('\n')


/*

......#########..............................
......#.......#..............................
......#.......#.......................######^
......#.......#.......................#......
......#.......#.......................#......
......#.......#.......................#......
......#####...#...........#############......
..........#...#...........#..................
......###########.........#..................
......#...#...#.#.........#..................
......#...#...#.#.........#..................
......#...#...#.#.........#..................
......#...#...#############..................
......#...#.....#............................
......#######...#............................
..........#.#...#............................
..........#.#...#............................
..........#.#...#............................
..........#######............................
............#................................
............#................................
............#................................
............#...........#######..............
............#...........#.....#..............
........###########.....#.....#..............
........#...#.....#.....#.....#..............
#############.....#.....#.....#...#..........
#.......#.........#.....#.....#...#..........
#.......#.....#############...#...#..........
#.......#.....#...#.....#.#...#...#..........
#.....#############.....#.#...#...#..........
#.....#.#.....#.........#.#...#...#..........
#.....#.#.....#.........###########..........
#.....#.#.....#...........#...#..............
#######.#######...........#...#####..........
..........................#.......#..........
..........................#.......#..........
..........................#.......#..........
..........................#.......#..........
..........................#.......#..........
..........................#########..........

L6 L4 R12
L6 R12 R12 L8
L6 L4 R12
L6 L10 L10 L6
L6 R12 R12 L8
L6 L4 R12
L6 L10 L10 L6
L6 R12 R12 L8
L6 L4 R12
L6 L10 L10 L6

A: L6 L4 R12
B: L6 R12 R12 L8
C: L6 L10 L10 L6

ABACBACBAC

 */